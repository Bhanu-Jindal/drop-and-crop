{"version":3,"sources":["learn/ImgDropAndCrop.js","App.js","serviceWorker.js","index.js"],"names":["acceptedFileTypes","acceptedFileTypesArray","split","map","item","trim","ImgDropAndCrop","props","imagePreviewCanvasRef","React","createRef","handleOnDrop","bind","verifyFile","handleOnCropChange","handleImageLoaded","handleOnCropComplete","state","imgSrc","imgSrcExt","crop","aspect","files","length","currentFile","currentFileType","type","currentFileSize","size","alert","includes","rejectedFiles","this","myFileItemReader","FileReader","addEventListener","myResult","result","console","log","setState","readAsDataURL","image","pixelCrop","img","src","onChange","onLoaded","onComplete","onDrop","accept","multiple","getRootProps","getInputProps","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oSAYMA,G,MAAoB,4DACpBC,EAAyBD,EAAkBE,MAAM,KAAKC,KAAI,SAACC,GAAW,OAAOA,EAAKC,UA2IzEC,E,kDAxIb,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,sBAAwBC,IAAMC,YACnC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,mBAAqB,EAAKA,mBAAmBF,KAAxB,gBAC1B,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBACzB,EAAKI,qBAAuB,EAAKA,qBAAqBJ,KAA1B,gBAG5B,EAAKK,MAAQ,CACZC,OAAQ,KACRC,UAAW,KACXC,KAAM,CACLC,OAAQ,IAdQ,E,uDAmBRC,GACX,GAAIA,GAASA,EAAMC,OAAS,EAAG,CAC9B,IAAMC,EAAcF,EAAM,GACpBG,EAAkBD,EAAYE,KAC9BC,EAAkBH,EAAYI,KACpC,OAAID,EA7Ba,MA8BhBE,MAAM,4BAA8BF,EAAkB,wBAC/C,KAEH1B,EAAuB6B,SAASL,KACpCI,MAAM,sDACC,M,mCAMIP,EAAOS,GAAgB,IAAD,OAInC,IAHKA,GAAiBA,EAAcR,OAAS,GAC5CS,KAAKnB,WAAWkB,GAEbT,GAASA,EAAMC,OAAS,IACRS,KAAKnB,WAAWS,GACnB,CACf,IAAME,EAAcF,EAAM,GACpBW,EAAmB,IAAIC,WAC7BD,EAAiBE,iBAAiB,QAAQ,WACzC,IAAMC,EAAWH,EAAiBI,OAClCC,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CACbtB,OAAQkB,OAGP,GACHH,EAAiBQ,cAAcjB,M,wCAKfkB,M,yCAICtB,GACnBY,KAAKQ,SAAS,CAAEpB,KAAMA,M,2CAGDA,EAAMuB,GAC3BL,QAAQC,IAAInB,EAAMuB,K,+BAqCR,IACFzB,EAAWc,KAAKf,MAAhBC,OACP,OACE,6BACE,6CACY,OAAXA,EACE,6BACC,kBAAC,IAAD,CACA0B,KAAG,EAACC,IAAK3B,EACTE,KAAMY,KAAKf,MAAMG,KACjB0B,SAAUd,KAAKlB,mBACfiC,SAAUf,KAAKjB,kBACfiC,WAAYhB,KAAKhB,uBAEnB,8BAGC,kBAAC,IAAD,CAAUiC,OAAQjB,KAAKrB,aAAcuC,OAAQlD,EAAmBmD,UAAU,IACxE,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACC,iCACA,wBAASD,IACL,0BAAWC,KACX,gG,GA/HWC,aCDdC,G,6KARX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJUF,cCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.57c5ee05.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n/* import {\r\n  base64StringtoFile,\r\n  downloadBase64File,\r\n  extractImageFileExtensionFromBase64,\r\n  image64toCanvasRef\r\n} from './ReusableUtils.js' */\r\n\r\nconst imageMaxSize = 10000000000\r\nconst acceptedFileTypes = 'image/x-png, image/png, image/jpg, image/jpeg, image.gif'\r\nconst acceptedFileTypesArray = acceptedFileTypes.split(',').map((item) => { return item.trim() })\r\n\r\nclass ImgDropAndCrop extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.imagePreviewCanvasRef = React.createRef()\r\n    this.handleOnDrop = this.handleOnDrop.bind(this)\r\n    this.verifyFile = this.verifyFile.bind(this)\r\n    this.handleOnCropChange = this.handleOnCropChange.bind(this)\r\n    this.handleImageLoaded = this.handleImageLoaded.bind(this)\r\n    this.handleOnCropComplete = this.handleOnCropComplete.bind(this)\r\n    /* this.handleDownloadClick = this.handleDownloadClick.bind(this)\r\n    this.handleClearToDefault = this.handleClearToDefault.bind(this) */\r\n    this.state = {\r\n    \timgSrc: null,\r\n    \timgSrcExt: null,\r\n    \tcrop: {\r\n    \t\taspect: 1 / 1\r\n    \t}\r\n    }\r\n  }\r\n\r\n  verifyFile (files) {\r\n  \tif (files && files.length > 0) {\r\n  \t\tconst currentFile = files[0]\r\n  \t\tconst currentFileType = currentFile.type\r\n  \t\tconst currentFileSize = currentFile.size\r\n  \t\tif (currentFileSize > imageMaxSize) {\r\n  \t\t\talert('This file is not allowed ' + currentFileSize + ' bytes is too large')\r\n  \t\t\treturn false\r\n  \t\t}\r\n  \t\tif (!acceptedFileTypesArray.includes(currentFileType)) {\r\n  \t\t\talert('This file is not allowed. Only images are allowed')\r\n  \t\t\treturn false\r\n  \t\t}\r\n  \t\treturn true\r\n  \t}\r\n  }\r\n\r\n  handleOnDrop (files, rejectedFiles) {\r\n  \t if (rejectedFiles && rejectedFiles.length > 0) {\r\n  \t\tthis.verifyFile(rejectedFiles)\r\n  \t}\r\n  \tif (files && files.length > 0) {\r\n  \t\tconst isVerified = this.verifyFile(files)\r\n  \t\tif (isVerified) {\r\n  \t\t\tconst currentFile = files[0]\r\n  \t\t\tconst myFileItemReader = new FileReader()\r\n  \t\t\tmyFileItemReader.addEventListener('load', () => {\r\n  \t\t\t\tconst myResult = myFileItemReader.result\r\n  \t\t\t\tconsole.log(myResult)\r\n  \t\t\t\tthis.setState({\r\n  \t\t\t\t\timgSrc: myResult\r\n  \t\t\t\t\t// imgSrcExt: extractImageFileExtensionFromBase64(myResult)\r\n  \t\t\t\t})\r\n  \t\t\t}, false)\r\n  \t\t\tmyFileItemReader.readAsDataURL(currentFile)\r\n  \t\t}\r\n  \t}\r\n  }\r\n\r\n  handleImageLoaded (image) {\r\n  \t// console.log(image)\r\n  }\r\n\r\n  handleOnCropChange (crop) {\r\n  \tthis.setState({ crop: crop })\r\n  }\r\n\r\n  handleOnCropComplete (crop, pixelCrop) {\r\n  \tconsole.log(crop, pixelCrop)\r\n  \t/* const canvasRef = this.imagePreviewCanvasRef.current\r\n  \tconst { imgSrc } = this.state\r\n  \timage64toCanvasRef(canvasRef, imgSrc, pixelCrop) */\r\n  }\r\n\r\n  /* handleDownloadClick (event) {\r\n  \tevent.preventDefault()\r\n  \tconst { imgSrc } = this.state\r\n  \tif (imgSrc) {\r\n  \t\tconst canvasRef = this.imagePreviewCanvasRef.current\r\n  \t\tconst { imgSrcExt } = this.state\r\n  \t\tconst imageData64 = canvasRef.toDataURL('image/' + imgSrcExt)\r\n  \t\tconst myFilename = 'previewfile.' + imgSrcExt\r\n  \t\tconst myNewCroppedFile = base64StringtoFile(imageData64, myFilename)\r\n  \t\tconsole.log(myNewCroppedFile)\r\n  \t\tdownloadBase64File(imageData64, myFilename)\r\n  \t\tthis.handleClearToDefault()\r\n  \t}\r\n  }\r\n\r\n  handleClearToDefault (event) {\r\n  \tif (event) {\r\n  \t\tevent.preventDefault()\r\n  \t}\r\n  \tconst canvas = this.imagePreviewCanvasRef.current\r\n  \tconst ctx = canvas.getContext('2d')\r\n  \tctx.clearRect(0, 0, canvas.width, canvas.height)\r\n  \tthis.setState({\r\n  \t\timgSrc: null,\r\n    \timgSrcExt: null,\r\n    \tcrop: {\r\n    \t\taspect: 1 / 1\r\n    \t}\r\n  \t})\r\n  } */\r\n\r\n  render () {\r\n  \tconst { imgSrc } = this.state\r\n    return (\r\n      <div>\r\n        <h1>Drop and Crop</h1>\r\n        {imgSrc !== null\r\n        \t? <div>\r\n            <ReactCrop\r\n            img src={imgSrc}\r\n            crop={this.state.crop}\r\n            onChange={this.handleOnCropChange}\r\n            onLoaded={this.handleImageLoaded}\r\n            onComplete={this.handleOnCropComplete}\r\n          />\r\n          <br />\r\n\r\n          </div>\r\n        \t: <Dropzone onDrop={this.handleOnDrop} accept={acceptedFileTypes} multiple={false}>\r\n          \t\t{({ getRootProps, getInputProps }) => (\r\n              <section>\r\n              <div {...getRootProps()}>\r\n                  <input {...getInputProps()} />\r\n                  <p>Drag 'n' drop some files here, or click to select files</p>\r\n                </div>\r\n            </section>\r\n  \t\t\t\t)}\r\n           </Dropzone>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ImgDropAndCrop\r\n","import React, { Component } from 'react'\nimport ImgDropAndCrop from './learn/ImgDropAndCrop.js'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <div className='App'>\n        <ImgDropAndCrop />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}